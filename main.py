import os
import logging
import time
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    ContextTypes, MessageHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)

logger = logging.getLogger(__name__)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∞–Ω—Ç–∏-—Å–ø–∞–º)
user_last_request = {}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_requests = 0

def get_bin_info(bin_number: str) -> str:
    try:
        response = requests.get(f"https://lookup.binlist.net/{bin_number}")
        if response.status_code != 200:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BIN (6-8 —Ü–∏—Ñ—Ä)."

        data = response.json()
        country = data.get("country", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        bank = data.get("bank", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        brand = data.get("scheme", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper()
        card_type = data.get("type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper()
        level = data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper()

        return (
            f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ BIN {bin_number}:
"
            f"üè¶ Bank: {bank}
"
            f"üåç Country: {country}
"
            f"üí≥ Brand: {brand}
"
            f"üìÑ Type: {card_type}
"
            f"‚≠ê Level: {level}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ BIN: {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ BIN (6-8 —Ü–∏—Ñ—Ä), –∏ —è –ø–æ–∫–∞–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_requests}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global total_requests

    user_id = update.message.from_user.id
    now = time.time()
    if user_id in user_last_request and now - user_last_request[user_id] < 5:
        await update.message.reply_text("‚è± –ü–æ–¥–æ–∂–¥–∏ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    user_last_request[user_id] = now

    bin_number = update.message.text.strip()
    if not bin_number.isdigit() or len(bin_number) < 6:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π BIN (6-8 —Ü–∏—Ñ—Ä).")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª BIN: {bin_number}")
    total_requests += 1
    result = get_bin_info(bin_number)
    await update.message.reply_text(result)

def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        logger.error("8291001795:AAEHB171u_CQ5fXG0X5QDXpN8-wEY2AKbtY")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
